{"version":3,"sources":["logo.svg","Choice.js","StoryNode.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Choice","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","outcomes","handleClick","bind","assertThisInitialized","changeState","prevProps","setState","console","log","e","outcome","Math","random","i","length","probability","goTo","react_default","a","createElement","onClick","React","Component","StoryNode","choices","_this2","map","choice","src_Choice","App","story","data","newState","className","src_StoryNode","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53854af1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport \"./Choice\";\r\n\r\nclass Choice extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            text:props.text,\r\n            outcomes:props.outcomes\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.changeState=props.changeState;\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.text !== this.props.text){\r\n            this.setState({\r\n                text: this.props.text,\r\n                outcomes: this.props.outcomes\r\n            });\r\n        }\r\n        console.log(\"props changed\")\r\n    }\r\n\r\n    handleClick(e){\r\n        let outcome=Math.random();\r\n        for(let i =0;i<this.state.outcomes.length;i++){\r\n            if(outcome<this.state.outcomes[i].probability){\r\n                outcome=this.state.outcomes[i].goTo;\r\n                break;\r\n            }else{\r\n                outcome=outcome-this.state.outcomes[i].probability;\r\n            }\r\n        }\r\n        this.changeState(outcome);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <button onClick={this.handleClick}>{this.state.text}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Choice;","import React from 'react';\r\nimport \"./StoryNode\";\r\nimport Choice from './Choice'\r\n\r\nclass StoryNode extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            text:props.text,\r\n            choices:props.choices\r\n        };\r\n        this.changeState=props.changeState;\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.text !== this.props.text){\r\n            this.setState({\r\n                choices:this.props.choices,\r\n                text: this.props.text,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        console.log(this.state.choices);\r\n        return(\r\n            <div>\r\n                <p>{this.state.text}</p>\r\n                    {this.state.choices.map(choice => <Choice changeState={this.changeState} text={choice.text} outcomes={choice.outcomes}/>)}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default StoryNode;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport data from './story.json';\nimport StoryNode from './StoryNode'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      state:0\n      };\n    this.story=data;\n    this.changeState = this.changeState.bind(this);\n  }\n\n  changeState(newState){\n    this.setState({\n        state:newState\n    });\n    console.log(this.state.state);\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <StoryNode changeState={this.changeState} text={this.story[this.state.state].text} choices={this.story[this.state.state].choices}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}